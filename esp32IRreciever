/*********
  Rui Santos
  Complete instructions at https://RandomNerdTutorials.com/esp32-ble-server-client/
  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files.
  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
*********/
#include "BLEDevice.h"
//#include <WiFi.h>
//#include <WIFIClient.h>
//#include <HTTPClient.h>
#include <IRremote.h>

const int IR_SEND_PIN = 15;

//const char* ssid = "SSID";
//const char* password = "Password";

//Your Domain name with URL path or IP address with path
#define Threshold 40 /* Greater the value, more the sensitivity */

String lightstatus = "off";
String fanstatus = "off";
int tryhard = 0;
int off = 0;

//Default Temperature is in Celsius
//Comment the next line for Temperature in Fahrenheit

//BLE Server name (the other ESP32 name running the server sketch)
#define bleServerName "WeatherMonitor"
touch_pad_t touchPin;

/* UUID's of the service, characteristic that we want to read*/
// BLE Service
static BLEUUID bmeServiceUUID("180f");

// BLE Characteristics
// Humidity Characteristic
static BLEUUID humidityCharacteristicUUID("2A19");

//Flags stating if should begin connecting and if the connection is up
static boolean doConnect = false;
static boolean connected = false;

//Address of the peripheral device. Address will be found during scanning...
static BLEAddress *pServerAddress;
 
//Characteristicd that we want to read
static BLERemoteCharacteristic* humidityCharacteristic;

//Activate notify
const uint8_t notificationOn[] = {0x1, 0x0};
const uint8_t notificationOff[] = {0x0, 0x0};


void callbacksleep(){
  //placeholder callback function
}



//Variables to store temperature and humidity
char* humidityChar;

//Flags to check whether new temperature and humidity readings are available
boolean newHumidity = false;

//Connect to the BLE Server that has the name, Service, and Characteristics
bool connectToServer(BLEAddress pAddress) {
   BLEClient* pClient = BLEDevice::createClient();
 
  // Connect to the remove BLE Server.
  pClient->connect(pAddress);
  Serial.println(" - Connected to server");
 
  // Obtain a reference to the service we are after in the remote BLE server.
  BLERemoteService* pRemoteService = pClient->getService(bmeServiceUUID);
  if (pRemoteService == nullptr) {
    Serial.print("Failed to find our service UUID: ");
    Serial.println(bmeServiceUUID.toString().c_str());
    return (false);
  }
 
  // Obtain a reference to the characteristics in the service of the remote BLE server.
  humidityCharacteristic = pRemoteService->getCharacteristic(humidityCharacteristicUUID);

  if (humidityCharacteristic == nullptr) {
    Serial.print("Failed to find our characteristic UUID");
    return false;
  }
  Serial.println(" - Found our characteristics");
 
  //Assign callback functions for the Characteristics
 
  humidityCharacteristic->registerForNotify(humidityNotifyCallback);
  return true;
}

//Callback function that gets called, when another device's advertisement has been received
class MyAdvertisedDeviceCallbacks: public BLEAdvertisedDeviceCallbacks {
  void onResult(BLEAdvertisedDevice advertisedDevice) {
    if (advertisedDevice.getName() == bleServerName) { //Check if the name of the advertiser matches
      advertisedDevice.getScan()->stop(); //Scan can be stopped, we found what we are looking for
      pServerAddress = new BLEAddress(advertisedDevice.getAddress()); //Address of advertiser is the one we need
      doConnect = true; //Set indicator, stating that we are ready to connect
      Serial.println("Device found. Connecting!");
    }
  }
};
 



uint32_t reverseBits( uint32_t val ) {
  uint32_t ret = 0;
  for (uint8_t i = 0; i < 32; i++)
  {
    ret = (ret << 1) | ((val >> i) & 1);
  }
  return ret;
}


//When the BLE Server sends a new humidity reading with the notify property
static void humidityNotifyCallback(BLERemoteCharacteristic* pBLERemoteCharacteristic, uint8_t* pData, size_t length, bool isNotify) {
  humidityChar = (char*)pData;
  newHumidity = true;
 String myString = String(humidityChar);

 myString = myString.charAt(0);
Serial.println(myString);

 if(myString == "0"){
  IrSender.sendNECMSB(reverseBits(0xF708FB04),32); //updated from sendNEC to sendNECMSB as per ReadMe 
}

 if(myString == "1"){
  IrSender.sendNECMSB(reverseBits(0x837CFB04),32);
       
}
if(myString == "2") {
  if (off == 0) {
    off = 1;
    Serial.print("off is now triggered to be 1");
  }
  else if (off == 1){
    Serial.print("Going to sleep");
   // touchAttachInterrupt(T3, callbacksleep, Threshold);

  //Configure Touchpad as wakeup source
  //esp_sleep_enable_touchpad_wakeup();
   // esp_deep_sleep_start();
  }
  

  
}
}

//function that prints the latest sensor readings in the OLED display

void setup() {

 
  //Start serial communication
  Serial.begin(115200);
  Serial.println("Starting Arduino BLE Client application...");


  IrSender.begin(IR_SEND_PIN, DISABLE_LED_FEEDBACK); //Now included as per GitHub



//WiFi.begin(ssid, password);
  //Serial.println("Connecting");
  //while(WiFi.status() != WL_CONNECTED) {
   // delay(500);
   // Serial.print(".");
 // }
  //Serial.println("");
  //Serial.print("Connected to WiFi network with IP Address: ");
  //Serial.println(WiFi.localIP());

 
  //Init BLE device
  BLEDevice::init("");
 
  // Retrieve a Scanner and set the callback we want to use to be informed when we
  // have detected a new device.  Specify that we want active scanning and start the
  // scan to run for 30 seconds.
  BLEScan* pBLEScan = BLEDevice::getScan();
  pBLEScan->setAdvertisedDeviceCallbacks(new MyAdvertisedDeviceCallbacks());
  pBLEScan->setActiveScan(true);
  pBLEScan->start(30);
}

void loop() {
  // If the flag "doConnect" is true then we have scanned for and found the desired
  // BLE Server with which we wish to connect.  Now we connect to it.  Once we are
  // connected we set the connected flag to be true.
  if (doConnect == true) {
    if (connectToServer(*pServerAddress)) {
      Serial.println("We are now connected to the BLE Server.");
      //Activate the Notify property of each Characteristic
      humidityCharacteristic->getDescriptor(BLEUUID((uint16_t)0x2902))->writeValue((uint8_t*)notificationOn, 2, true);
      connected = true;
    } else {
      Serial.println("We have failed to connect to the server; Restart your device to scan for nearby BLE server again.");
    }
    doConnect = false;
  }
  //if new temperature readings are available, print in the OLED
  if (newHumidity){
    newHumidity = false;
  }
  delay(1000); // Delay a second between loops.
}
